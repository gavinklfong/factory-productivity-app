import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchDailyProductionAPI, fetchFoodFactoriesAPI} from './factoryAPI';
import { Status, ResponseStatus } from './constants';

const initialState = {
  selectedFactory: {},
  startDate: null,
  endDate: null,
  factoryList: [{id:'', name: ''}],
  dailyProductionData: [],
  status: 'idle',
  displayMessage: null
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchFactoriesAsync = createAsyncThunk(
  'factory/fetchFactories',
  async () => {
    const response = await fetchFoodFactoriesAPI();
    // The value we return becomes the `fulfilled` action payload
    console.log(response);
    return response;
  }
);

export const fetchDailyProductionAsync = createAsyncThunk(
  'factory/fetchDailyProduction',
  async (request) => {
    const response = await fetchDailyProductionAPI(request.factoryId, request.startDate, request.endDate);
    // The value we return becomes the `fulfilled` action payload
    console.log(response);
    return response;
  }
);

export const factorySlice = createSlice({
  name: 'factory',
  initialState,  
  reducers: {
    setDailyProductionData: (state, action) => {
      state.dailyProductionData = action.payload;
    },
    setSelectedFactory: (state, action) => {
      state.selectedFactory = action.payload;
    },
    setStartDate: (state, action) => {
      state.startDate = action.payload;
    },
    setEndDate: (state, action) => {
      state.endDate = action.payload;
    },
    closeMessageDialog: (state) => {
      state.displayMessage = null;
    },
    setDisplayMessage: (state, action) => {
      state.displayMessage = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchFactoriesAsync.pending, (state) => {
        state.status = Status.loading;
      })
      .addCase(fetchFactoriesAsync.fulfilled, (state, action) => {
        fetchFactoriesAsyncReducer(state, action);
      })
      .addCase(fetchDailyProductionAsync.pending, (state) => {
        state.status = Status.loading;
      })
      .addCase(fetchDailyProductionAsync.fulfilled, (state, action) => {
        fetchDailyProductionAsyncReducer(state, action)
      });
  },
});

export const { setDailyProductionData, setSelectedFactory, setStartDate, setEndDate, closeMessageDialog, setDisplayMessage } = factorySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectFactoryList = (state) => state.factory.factoryList;
export const selectSelectedFactory = (state) => state.factory.selectedFactory;
export const selectStartDate = (state) => state.factory.startDate;
export const selectEndDate = (state) => state.factory.endDate;
export const selectDailyProductionData = (state) => state.factory.dailyProductionData;
export const selectStatus = (state) => state.factory.status;
export const selectDisplayMessage = (state) => state.factory.displayMessage;


const fetchFactoriesAsyncReducer = (state, action) => {
  state.status = Status.idle;
  if (action.payload.status === ResponseStatus.ok) {
    state.factoryList = action.payload.data
  } else {
    state.displayMessage = "fail to retrieve factory list";
  }
}

const fetchDailyProductionAsyncReducer = (state, action) => {
  state.status = Status.idle;
  if (action.payload.status === ResponseStatus.ok) {
    state.dailyProductionData = action.payload.data
  } else if (action.payload.status === ResponseStatus.badRequest) {
    state.displayMessage = "Invalid request";
    state.dailyProductionData = [];
  } else if (action.payload.status === ResponseStatus.notFound) {
    state.displayMessage = "No record found";
    state.dailyProductionData = [];
  } else {
    state.displayMessage = "System error";
    state.dailyProductionData = [];
  }
}


export default factorySlice.reducer;
